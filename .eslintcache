[{"D:\\study\\TodoMVC\\myapp\\src\\index.tsx":"1","D:\\study\\TodoMVC\\myapp\\src\\reportWebVitals.ts":"2","D:\\study\\TodoMVC\\myapp\\src\\App.tsx":"3","D:\\study\\TodoMVC\\myapp\\src\\components\\TodoApp\\TodoApp.tsx":"4","D:\\study\\TodoMVC\\myapp\\src\\components\\TodoItem\\TodoItem.tsx":"5","D:\\study\\TodoMVC\\myapp\\src\\components\\Footer\\Footer.tsx":"6","D:\\study\\TodoMVC\\myapp\\src\\components\\TodoApp\\getTodoItemsFromLocalStorage.tsx":"7","D:\\study\\TodoMVC\\myapp\\src\\components\\Signin\\Signin.tsx":"8","D:\\study\\TodoMVC\\myapp\\src\\components\\Register\\Register.tsx":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":1475,"mtime":1611462082350,"results":"13","hashOfConfig":"11"},{"size":8247,"mtime":1611130115207,"results":"14","hashOfConfig":"11"},{"size":1402,"mtime":1608265600049,"results":"15","hashOfConfig":"11"},{"size":1427,"mtime":1608169241333,"results":"16","hashOfConfig":"11"},{"size":539,"mtime":1609574069285,"results":"17","hashOfConfig":"11"},{"size":2085,"mtime":1611131265302,"results":"18","hashOfConfig":"11"},{"size":2269,"mtime":1611461936255,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1v4hf48",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"D:\\study\\TodoMVC\\myapp\\src\\index.tsx",[],["40","41"],"D:\\study\\TodoMVC\\myapp\\src\\reportWebVitals.ts",[],"D:\\study\\TodoMVC\\myapp\\src\\App.tsx",[],"D:\\study\\TodoMVC\\myapp\\src\\components\\TodoApp\\TodoApp.tsx",["42","43","44","45","46","47","48","49","50"],"import React, {useRef, useState} from 'react';\r\nimport classes from \"./TodoApp.module.css\";\r\nimport TodoItem from \"../TodoItem/TodoItem\";\r\nimport Footer from \"../Footer/Footer\";\r\nimport {getTodoItemsFromLocalStorage} from \"./getTodoItemsFromLocalStorage\";\r\nimport Signin from \"../Signin/Signin\";\r\nimport Register from \"../Register/Register\";\r\nimport {Route, BrowserRouter as Router} from 'react-router-dom';\r\n\r\n\r\nexport interface T {\r\n    name: string,\r\n    completed: boolean,\r\n    id: string,\r\n    dbClick: boolean\r\n}\r\n\r\nconst TodoApp = () => {\r\n    const [todoList, setTodoList] = useState<T[]>(getTodoItemsFromLocalStorage(\"todo\") || []);\r\n    const [labelChecked, setLabelChecked] = useState<boolean>(false);\r\n    const [leftItemsNumber, setLeftItemNumber] = useState<number>(countLeftItems());\r\n    const [nowShowing, setNowShowing] = useState<string>(getNowShowing());\r\n    const [editText, setEditText] = useState<string>(\"\");\r\n    const [dbClick, setDbClick] = useState<boolean>(false);\r\n    const [signin, setSignin] = useState<boolean>(false);\r\n    const [register, setRegister] = useState<boolean>(false);\r\n    const todoListRef = useRef<HTMLUListElement>(null);\r\n\r\n    const destroyHandler = (todo: T) => {\r\n        let index = todoList.indexOf(todo);\r\n        let newTodoList: T[] = [...todoList.slice(0, index), ...todoList.slice(index + 1)];\r\n        setTodoList(newTodoList);\r\n        localStorage.setItem(\"todo\", JSON.stringify(newTodoList));\r\n        if (!todo.completed) {\r\n            if (leftItemsNumber === 1) {\r\n                setLabelChecked(!labelChecked);\r\n            }\r\n            setLeftItemNumber(leftItemsNumber - 1);\r\n        }\r\n    }\r\n\r\n    const completedHandler = (todo: T) => {\r\n        if (todo.completed) {\r\n            setLeftItemNumber(leftItemsNumber + 1);\r\n            if (leftItemsNumber === 0) {\r\n                setLabelChecked(!labelChecked);\r\n            }\r\n        } else {\r\n            setLeftItemNumber(leftItemsNumber - 1);\r\n            if (leftItemsNumber === 1) {\r\n                setLabelChecked(!labelChecked);\r\n            }\r\n        }\r\n        todo.completed = !todo.completed;\r\n        localStorage.setItem(\"todo\", JSON.stringify(todoList));\r\n    }\r\n\r\n    const clearButtonHandler = () => {\r\n        let newTodoList: T[] = [];\r\n        for (let i = 0; i < todoList.length; i++) {\r\n            if (!todoList[i].completed) {\r\n                newTodoList.push(todoList[i]);\r\n            }\r\n        }\r\n        setTodoList(newTodoList);\r\n        localStorage.setItem(\"todo\", JSON.stringify(newTodoList));\r\n    }\r\n\r\n    const showingHandler = (event: MouseEvent) => {\r\n        let a = event.target as HTMLElement;\r\n        if (a.innerText === \"All\") {\r\n            setNowShowing(\"all\");\r\n        } else if (a.innerText === \"Active\") {\r\n            setNowShowing(\"active\");\r\n        } else if (a.innerText === \"Completed\") {\r\n            setNowShowing(\"completed\");\r\n        }\r\n    }\r\n\r\n    const editHandler = (todo: T) => {\r\n        for (let i = 0; i < todoList.length; i++) {\r\n            todoList[i].dbClick = false;\r\n        }\r\n        todo.dbClick = true;\r\n        setEditText(todo.name);\r\n        setDbClick(true);\r\n    }\r\n\r\n    const blurHandler = (todo: T) => {\r\n        todo.dbClick = false;\r\n        todo.name = editText;\r\n        setDbClick(false);\r\n    }\r\n\r\n    const changeHandler = (event: React.FormEvent) => {\r\n        let input: any = event.target;\r\n        setEditText(input.value);\r\n    }\r\n\r\n    const editKeyDownHandler = (event: React.KeyboardEvent, todo: T) => {\r\n        if (event.key === \"Enter\") {\r\n            todo.dbClick = false;\r\n            todo.name = editText;\r\n            setDbClick(false);\r\n            localStorage.setItem(\"todo\", JSON.stringify(todoList));\r\n        }\r\n    }\r\n\r\n    const SigninHandler = () => {\r\n        setSignin(!signin);\r\n    }\r\n\r\n    const RegisterHandler = () => {\r\n        setRegister(!register);\r\n    }\r\n\r\n    function uuid(): string {\r\n        let i, random;\r\n        let uuid = '';\r\n\r\n        for (i = 0; i < 32; i++) {\r\n            random = Math.random() * 16 | 0;\r\n            if (i === 8 || i === 12 || i === 16 || i === 20) {\r\n                uuid += '-';\r\n            }\r\n            // eslint-disable-next-line no-mixed-operators\r\n            uuid += (i === 12 ? 4 : (i === 16 ? (random & 3 | 8) : random))\r\n                .toString(16);\r\n        }\r\n        return uuid;\r\n    }\r\n\r\n    function countLeftItems() {\r\n        let left = 0;\r\n        for (let i = 0; i < todoList.length; i++) {\r\n            if (!todoList[i].completed) {\r\n                left++;\r\n            }\r\n        }\r\n        return left;\r\n    }\r\n\r\n    function getNowShowing() {\r\n        if (!window.location.hash.split(\"/\")[1]) {\r\n            return \"all\";\r\n        }\r\n        return window.location.hash.split(\"/\")[1];\r\n    }\r\n\r\n    let main;\r\n    let todoItems = todoList.map((todo) => {\r\n        if ((nowShowing === \"active\" && !todo.completed) || (nowShowing === \"completed\" && todo.completed) || nowShowing === \"all\") {\r\n            return (<TodoItem key={todo.id} todo={todo} editText={editText} destroyHandler={destroyHandler}\r\n                              completedHandler={completedHandler} editHandler={editHandler} blurHandler={blurHandler}\r\n                              changeHandler={changeHandler} editKeyDownHandler={editKeyDownHandler}/>);\r\n        }\r\n    })\r\n    let footer;\r\n\r\n    function inputKeyDownHandler(event: React.KeyboardEvent) {\r\n        if (event.key !== \"Enter\") {\r\n            return;\r\n        }\r\n        const target = event.target as HTMLTextAreaElement;\r\n        if (target.value === \"\") {\r\n            return;\r\n        }\r\n        let newTodoList: T[] = [...todoList, {name: target.value, completed: false, id: uuid(), dbClick: false}];\r\n        localStorage.setItem(\"todo\", JSON.stringify(newTodoList));\r\n        setTodoList(newTodoList);\r\n        setLeftItemNumber(leftItemsNumber + 1);\r\n        target.value = \"\";\r\n    }\r\n\r\n    function labelChangeHandler() {\r\n        setLabelChecked(!labelChecked);\r\n        if (todoListRef.current) {\r\n            let todoListUl = todoListRef.current;\r\n            if (leftItemsNumber === 0) {\r\n                for (let i = 0; i < todoList.length; i++) {\r\n                    todoList[i].completed = false;\r\n                }\r\n                setLeftItemNumber(todoList.length);\r\n            } else {\r\n                for (let i = 0; i < todoList.length; i++) {\r\n                    todoList[i].completed = true;\r\n                }\r\n                setLeftItemNumber(0);\r\n            }\r\n        }\r\n        localStorage.setItem(\"todo\", JSON.stringify(todoList));\r\n    }\r\n\r\n    if (todoList.length) {\r\n        main = (\r\n            <section>\r\n                <input\r\n                    id=\"toggle-all\"\r\n                    className={classes.toggleAll}\r\n                    type=\"checkbox\"\r\n                    onChange={labelChangeHandler}\r\n                    checked={labelChecked}\r\n                />\r\n                <label htmlFor=\"toggle-all\" className={classes.toggleAllLabel}/>\r\n                <ul className={classes.todoList} ref={todoListRef}>\r\n                    {todoItems}\r\n                </ul>\r\n            </section>\r\n        )\r\n        footer = (\r\n            <Footer leftItemsNumber={leftItemsNumber} totalNumber={todoList.length} nowShowing={nowShowing}\r\n                    clearButtonHandler={clearButtonHandler} showingHandler={showingHandler}/>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <section className={classes.todoapp}>\r\n                <header className={classes.header}>\r\n                    <h1>todos</h1>\r\n                    <input className={classes.newTodo} placeholder=\"What needs to be done?\"\r\n                           onKeyDown={inputKeyDownHandler}/>\r\n                </header>\r\n\r\n                {main}\r\n                {footer}\r\n            </section>\r\n            <div className={classes.info}>\r\n                <p>Double-click to edit a todo</p>\r\n                <p>Created by <a href=\"http://github.com/remojansen/\">Remo H. Jansen</a></p>\r\n                <p>Part of <a href=\"http://todomvc.com\">TodoMVC</a></p>\r\n            </div>\r\n        </React.Fragment>\r\n\r\n    );\r\n}\r\n\r\nexport default TodoApp;\r\n","D:\\study\\TodoMVC\\myapp\\src\\components\\TodoItem\\TodoItem.tsx",[],"D:\\study\\TodoMVC\\myapp\\src\\components\\Footer\\Footer.tsx",[],"D:\\study\\TodoMVC\\myapp\\src\\components\\TodoApp\\getTodoItemsFromLocalStorage.tsx",[],"D:\\study\\TodoMVC\\myapp\\src\\components\\Signin\\Signin.tsx",[],"D:\\study\\TodoMVC\\myapp\\src\\components\\Register\\Register.tsx",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":6,"column":8,"nodeType":"57","messageId":"58","endLine":6,"endColumn":14},{"ruleId":"55","severity":1,"message":"59","line":7,"column":8,"nodeType":"57","messageId":"58","endLine":7,"endColumn":16},{"ruleId":"55","severity":1,"message":"60","line":8,"column":9,"nodeType":"57","messageId":"58","endLine":8,"endColumn":14},{"ruleId":"55","severity":1,"message":"61","line":8,"column":33,"nodeType":"57","messageId":"58","endLine":8,"endColumn":39},{"ruleId":"55","severity":1,"message":"62","line":24,"column":12,"nodeType":"57","messageId":"58","endLine":24,"endColumn":19},{"ruleId":"55","severity":1,"message":"63","line":109,"column":11,"nodeType":"57","messageId":"58","endLine":109,"endColumn":24},{"ruleId":"55","severity":1,"message":"64","line":113,"column":11,"nodeType":"57","messageId":"58","endLine":113,"endColumn":26},{"ruleId":"65","severity":1,"message":"66","line":151,"column":41,"nodeType":"67","messageId":"68","endLine":151,"endColumn":43},{"ruleId":"55","severity":1,"message":"69","line":178,"column":17,"nodeType":"57","messageId":"58","endLine":178,"endColumn":27},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"@typescript-eslint/no-unused-vars","'Signin' is defined but never used.","Identifier","unusedVar","'Register' is defined but never used.","'Route' is defined but never used.","'Router' is defined but never used.","'dbClick' is assigned a value but never used.","'SigninHandler' is assigned a value but never used.","'RegisterHandler' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'todoListUl' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]